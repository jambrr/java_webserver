/*
 * This source file was generated by the Gradle 'init' task
 */
package java_rest_api;
import com.sun.net.httpserver.HttpServer;

import java.io.IOException;
import java.io.InputStream;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;

public class MovieLibraryServer {
    public static void main(String[] args) throws IOException{
        HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0);

        server.createContext("/movies", new MovieHandler());
        server.setExecutor(null);

        server.start();
        System.out.println("Server started no port 8000");
    }
}

class Movie{
    private String id;
    private String title;
    private String author;

    public Movie(String pId, String pTitle, String pAuthor) {
        this.id = pId;
        this.title = pTitle;
        this.author = pAuthor;
    }

    public Movie(){
        this("1", "Java 101", "JAva Guru");
    }

    public String getTitle(){
        return this.title;
    }

    public String getAuthor(){
        return this.author;
    }

    public String getId(){
        return this.id;
    }
}

class MovieHandler implements HttpHandler{
    private List<Movie> movies = new ArrayList<>();

    @Override
    public void handle(HttpExchange exchange) throws IOException{
        String response = "";
        int statusCode = 200;

        if ("GET".equals(exchange.getRequestMethod())){
            response = getAllMovies();
        } else if ("POST".equals(exchange.getRequestMethod())){
            InputStream is = exchange.getRequestBody();
            String body = new String(is.readAllBytes(), StandardCharsets.UTF_8);

            String id = extractJsonValue(body, "id");
            String title = extractJsonValue(body, "title");
            String director = extractJsonValue(body, "director");

            Movie newMovie = new Movie(id, title, director);
            movies.add(newMovie);
            response = "Movie added";

        } else{
            response = "Unsupported method";
            statusCode = 405;
        }

        exchange.sendResponseHeaders(statusCode, response.getBytes().length);
        OutputStream os = exchange.getResponseBody();
        os.write(response.getBytes());
        os.close();
    }

    private String getAllMovies() {
        StringBuilder sb = new StringBuilder();
        for (Movie movie : movies) {
            sb.append(movie.getTitle()).append("\n");
            System.out.println(movie.getTitle());
        }
        return sb.toString();
    }

    private String extractJsonValue(String json, String key){
        String pattern = "\"" + key + "\":\"";
        int start = json.indexOf(pattern) + pattern.length();
        int end = json.indexOf("\"", start); 

        return json.substring(start, end);
    }

}